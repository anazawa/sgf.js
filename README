NAME

  SGF.js - Type-aware SGF parser/stringifier that supports FF[1], FF[3] and FF[4]

SYNOPSIS

  In your HTML:

    <script src="sgf.js"></script>

  In your JavaScript:

    SGF.parse("(;FF[4]B[pd];W[qp])");
    // => [[
    //   { FF: 4, B: "pd" },
    //   { W: "qp" },
    //   []
    // ]]
 
    SGF.stringify([[
      { FF: 4, B: "pd" },
      { W: "qp" },
      []
    ]]);
    // => "(;FF[4]B[pd];W[qp])"

DESCRIPTION

  METHODS

    array = SGF.parse( string[, reviver] )

      Given a SGF string, returns an array representing a SGF collection.
      You can also pass a callback function that is used to filter properties.
      The callback is called with the object containing the property being
      processed as `this` and with the name of the property and the value
      as `arguments`. The return value is used to override the existing
      property value. If the callback returns `undefined`, then the property
      will be deleted.

      A SGF collection is represented by an array containing SGF
      game trees. Each game tree is again an array of SGF nodes.
      Each node is simply an object. Each SGF property is stored in the object
      with the property name as the key, and the property value(s) for the
      value. The last element of a game tree array always refers to an array
      containing sub game trees, called variations.

        Collection:

          [
            [GameTree],
            [GameTree],
            ...
            [GameTree]
          ]

        GameTree:

          [
            {Node},
            {Node},
            ...
            {Node},
            [
              [GameTree],
              [GameTree],
              ...
              [GameTree]
            ]
          ]

        Node:

          {
            FF: 4,
            B: "pd"
          }
   
      You can also convert the above data structure to JSON:
   
        JSON.stringify( SGF.parse("(;FF[4])") );
        // => JSON representaion of SGF
   
      While an invalid SGF is rejected, e.g., "(;FF[four])", this method
      does not care about the meaning of the given SGF property,
      but the format of the property. In other words, it allows you to
      parse a meaningless syntactically-correct SGF, such as
      "(;FF[4]SZ[1]B[ZZ])". You have to check the meanings by yourself.
   
      This method neither checks the CA (charset) property of the given
      SGF string nor decodes the encoded properties, such as C (comment).
      You have to decode them by yourself.
   
      This method does not convert HTML special characters in text properties
      into their entity equivalents. You have to escape them by yourself.

      EXAMPLES

        Coordinate Transformation
  
          var char2coord = { "a": 0, "b": 1, ... };

          SGF.parse("(;FF[4]B[ab];W[ba])", function (key, value) {
            if ( key === "B" || key === "W" ) {
              var x = value.charAt(0);
              var y = value.charAt(1);
              return [ char2coord[x], char2coord[y] ];
            }
            else {
              return value;
            }
          });
          /* => [[
           *   { FF: 4, B: [0, 1] },
           *   { W: [1, 0] },
           *   []
           * ]]
           */

        Remove Comments

          SGF.parse("(;FF[4]C[foo: hi\nbar: gg])", function (key, value) {
            if ( key !== "C" ) { // exclude the C property
              return value;
            }
          });
          /* => [[
           *   { FF: 4 },
           *   []
           * ]]
           */

    string = SGF.stringify( array[, replacer] )

      Given an array representing a SGF collection, returns a SGF string.
      If a property name does not look like SGF, the property will be ignored
      silently. In other words, that property is considered user-defined.
      For example, "FOO" and "FOOBAR" are valid FF[4] property names.
      "foo", "fooBar" and "foo_bar" are ignored. If a property value has
      toSGF method, the value is replaced with the return value of the method.

      EXAMPLES

        User-defined properties are ignored

          SGF.stringify([[
            {
              FF: 4,
              foo: "bar" // ignored
            },
            []
          ]]);
          // => "(;FF[4])"

        Using toSGF Method

          SGF.stringify([[
            {
              FF: 4,
              FOO: {
                bar: "baz",
                toSGF: function () {
                  return [ this.bar ];
                }
              }
            },
            []
          ]]);
          // => "(;FF[4]FOO[baz])"

        Select properties

          var sgf = [[
            { FF: 4, B: "pd", C: "foo: hi" },
            { W: "qp", C: "bar: gg" },
            []
          ]];
 
          // FF, B and W are included, while C is excluded
          SGF.stringify(sgf, ["FF", "B", "W"]);
          // => "(;FF[4]B[pd];W[qp])"

        Coordinate Transformation
  
          var coord2char = [ "a", "b", ... ];

          var sgf = [[
            { FF: 4, B: [0, 1] },
            { W: [1, 0] },
            []
          ]];

          SGF.stringify(sgf, function (key, value) {
            if ( key === "B" || key === "W" ) {
              var x = coord2char[ value[0] ];
              var y = coord2char[ value[1] ];
              return x + y; // => "a"+"b" => "ab"
            }
            else {
              return value;
            }
          });
          // => "(;FF[4]B[ab];W[ba])"

SEE ALSO

  http://www.red-bean.com/sgf/

AUTHOR

  Ryo Anazawa (anazawa@cpan.org)

LICENSE

  MIT

